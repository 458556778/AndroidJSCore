import org.apache.commons.io.FilenameUtils

apply plugin: 'com.android.library'
apply plugin: 'jacoco'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 23
        versionCode 3
        versionName "3.0-pre2"
        setProperty("archivesBaseName", "AndroidJSCore-$versionName")
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.4.0'
    androidTestCompile 'junit:junit:4.+'
    androidTestCompile 'com.android.support:support-annotations:23+'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
}

task hemroidBuild(type: Exec) {
    def rootDir = project.rootDir
    def localProperties = new File(rootDir, "local.properties")
    def ndkDir = ''
    def sdkDir = ''
    def hemroidDir = 'foo'
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        ndkDir = properties.getProperty('ndk.dir')
        sdkDir = properties.getProperty('sdk.dir')
        try {
            def stdout = new ByteArrayOutputStream()
            def result = exec {
                executable = "which"
                args = ["hemroid"]
                standardOutput = stdout;
            }
            hemroidDir = FilenameUtils.getFullPathNoEndSeparator(stdout.toString())
        } catch (Throwable e) {
            hemroidDir = ''
        }
    }
    if (hemroidDir != '') {
        executable "sh"
        args "-c", "NDK_MODULE_PATH=$hemroidDir/packages ANDROID_SDK=$sdkDir ANDROID_NDK=$ndkDir $ndkDir/ndk-build"
    } else {
        executable "echo"
        args "'hemroid' not in the path.  Make sure you add it to the PATH variable and run gradle explicitly."
    }
}

preBuild.dependsOn hemroidBuild
